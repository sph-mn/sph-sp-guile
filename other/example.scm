(import (sph) (sph sp) (sph sp synthesise))
(define sample-rate 96000)
(define channels 1)

(define (basic-io-example)
  (sp-call-with-output-file "/tmp/sp-file.wav" channels
    sample-rate
    (l (file)
      ; samples is a list with one samples vector per channel
      (let ((samples (list (f64vector 1 2 3 4))) (size 4)) (sp-file-write file samples size)))))

(define (seq-example) "creates one block with samples generated by events two times"
  (let*
    ( (events
        (seq-event-list
          ; start end channel-amplitude-paths low-cutoff-path high-cutoff-path
          (sp-band-event 0 2000 (q (((move (0 0.5)) (line (12000 0))))) 0.4 0.5)
          ; start end channel-amplitude-paths frequency-path
          (sp-wave-event 0 48000
            (q (((move (0 0.8)) (catmull-rom (12000 0.2) (24000 0.01)) (line (48000 0)))))
            (q ((move (0 4000)) (catmull-rom (12000 1000) (24000 1000)) (line (48000 0)))))))
      (events-2
        (seq-event-list (seq-event-group 0 48000 events)
          (seq-event-group 40000 (+ 48000 40000) events)))
      (series (seq-block-series events-2 1 channels sample-rate)))
    (seq-block-series 0 1
      1 events (l (output events) (sp-plot-samples (first output))) #:progress #t)
    (for-each (l (block) (for-each (l (channel) (sp-plot-samples channel)) block)) series)
    ;(sp-blocks->file series "/tmp/sp.wav" channels sample-rate sample-rate)
    ))

;(basic-io-example)
;(seq-example)
